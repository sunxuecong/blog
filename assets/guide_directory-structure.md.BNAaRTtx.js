import{_ as s,c as n,o as a,a3 as e}from"./chunks/framework.CokgVZ6D.js";const f=JSON.parse('{"title":"Project Structure","description":"","frontmatter":{},"headers":[],"relativePath":"guide/directory-structure.md","filePath":"guide/directory-structure.md","lastUpdated":1719483438000}'),p={name:"guide/directory-structure.md"},t=e(`<h1 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h1><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nova-admmin</span></span>
<span class="line"><span>├── .vscode                          # VS Code configuration files</span></span>
<span class="line"><span>│   ├── extensions.json              # Recommended VS Code extensions</span></span>
<span class="line"><span>│   └── settings.json                # VS Code editor settings</span></span>
<span class="line"><span>├── build                            # Build related configurations</span></span>
<span class="line"><span>│   ├── plugins.ts                   # Vite plugin related configurations</span></span>
<span class="line"><span>│   └── proxy.ts                     # Vite proxy related methods</span></span>
<span class="line"><span>├── public</span></span>
<span class="line"><span>│   └── favicon.svg                  # Site favicon</span></span>
<span class="line"><span>├── locales                          # Multilingual Configuration</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   ├── assets                       # Static resources</span></span>
<span class="line"><span>│   │   └── svg-icons                # Custom SVG icon resources</span></span>
<span class="line"><span>│   ├── components                   # Common components</span></span>
<span class="line"><span>│   │   ├── common                   # Framework internal components</span></span>
<span class="line"><span>│   │   └── custom                   # Custom components</span></span>
<span class="line"><span>│   ├── constants                    # Constants</span></span>
<span class="line"><span>│   ├── directives                   # Custom directives</span></span>
<span class="line"><span>│   │   ├── copy.ts                  # v-cope directive</span></span>
<span class="line"><span>│   │   └── permission.ts            # v-permission directive</span></span>
<span class="line"><span>│   ├── hooks                        # Composition functions</span></span>
<span class="line"><span>│   │   ├── useBoolean.ts            # Using Boolean composition</span></span>
<span class="line"><span>│   │   ├── useEcharts.ts            # Using Echarts composition functions</span></span>
<span class="line"><span>│   │   ├── useLoading.ts            # Using Loading composition functions</span></span>
<span class="line"><span>│   │   ├── usePermission.ts         # Using Permission composition functions</span></span>
<span class="line"><span>│   │   └──  useDefault.ts           # Composite use of re variables with default values</span></span>
<span class="line"><span>│   ├── layouts                      # Global layout components</span></span>
<span class="line"><span>│   │   ├── components               # Components inside the layout</span></span>
<span class="line"><span>│   │   ├── leftMenu.layout.vue      # Left menu layout</span></span>
<span class="line"><span>│   │   ├── topMenu.layout.vue       # Top menu layout</span></span>
<span class="line"><span>│   │   └── index.vue                # Base layout component</span></span>
<span class="line"><span>│   ├── modules                      # Unified auto-registration modules</span></span>
<span class="line"><span>│   │   │──assets.ts                 # Automatically register static resources</span></span>
<span class="line"><span>│   │   │──directives.ts             # Automatically register directives</span></span>
<span class="line"><span>│   │   └──i18n.ts                   # Automatically register multilingualism</span></span>
<span class="line"><span>│   ├── router                       # Router configuration</span></span>
<span class="line"><span>│   │   ├── guard.ts                 # Router guard configuration</span></span>
<span class="line"><span>│   │   ├── routes.inner.ts          # Fixed page routes</span></span>
<span class="line"><span>│   │   ├── routes.static.ts         # Local static page routes</span></span>
<span class="line"><span>│   │   └── index.ts                 # Instantiated router export</span></span>
<span class="line"><span>│   ├── service                      # Service configuration</span></span>
<span class="line"><span>│   │   ├── api                      # Global interface configuration</span></span>
<span class="line"><span>│   │   ├── http                     # Encapsulated request methods</span></span>
<span class="line"><span>│   │   │   ├── alova.ts             # Requester instance encapsulation</span></span>
<span class="line"><span>│   │   │   ├── config.ts            # Basic request field configuration</span></span>
<span class="line"><span>│   │   │   ├── handle.ts            # Request handling method encapsulation</span></span>
<span class="line"><span>│   │   │   └── index.ts             # Instantiated requester</span></span>
<span class="line"><span>│   │   └── index.ts                 # Export entry for request methods</span></span>
<span class="line"><span>│   ├── store                        # Global state management</span></span>
<span class="line"><span>│   │   ├── app</span></span>
<span class="line"><span>│   │   │   ├── theme.json           # Site theme configuration</span></span>
<span class="line"><span>│   │   │   └── index.ts             # Site style layout related storage</span></span>
<span class="line"><span>│   │   ├── auth.ts                  # User permission related storage</span></span>
<span class="line"><span>│   │   ├── route</span></span>
<span class="line"><span>│   │   │   ├── helper.js            # Route conversion utility methods</span></span>
<span class="line"><span>│   │   │   └── index.ts             # Route-related storage</span></span>
<span class="line"><span>│   │   └── tab.ts                   # Tab related storage</span></span>
<span class="line"><span>│   ├── styles                       # Project style styles</span></span>
<span class="line"><span>│   │   ├── reset.css                # Reset style CSS</span></span>
<span class="line"><span>│   │   ├── transition.css           # Transition style CSS</span></span>
<span class="line"><span>│   │   └── index.css                # Unified export entry</span></span>
<span class="line"><span>│   ├── typings                      # Type files</span></span>
<span class="line"><span>│   │   ├── api                      # Interface type files</span></span>
<span class="line"><span>│   │   ├── entities                 # Database table entity type file</span></span>
<span class="line"><span>│   │   ├── env.d.ts                 # Environment variable type files</span></span>
<span class="line"><span>│   │   ├── global.d.ts              # Other type files applicable globally</span></span>
<span class="line"><span>│   │   ├── route.d.ts               # Route type files</span></span>
<span class="line"><span>│   │   ├── router.d.ts              # Override router native types</span></span>
<span class="line"><span>│   │   ├── service.d.ts             # Request method type files</span></span>
<span class="line"><span>│   │   ├── auto-imports.d.ts        # Automatically imported method type files (auto-generated)</span></span>
<span class="line"><span>│   │   └── components.d.ts          # Automatically imported component type files (auto-generated)</span></span>
<span class="line"><span>│   ├── utils                        # Utility classes</span></span>
<span class="line"><span>│   │   ├── array.ts                 # Array utilities</span></span>
<span class="line"><span>│   │   ├── icon.ts                  # Icon utilities</span></span>
<span class="line"><span>│   │   ├── storage.ts               # Storage encapsulation utilities</span></span>
<span class="line"><span>│   │   ├── i18n.ts                  # Multilingual Tool</span></span>
<span class="line"><span>│   │   └── index.ts                 # Utility class export entry</span></span>
<span class="line"><span>│   ├── views                        # Pages</span></span>
<span class="line"><span>│   ├── App.vue                      # Root component</span></span>
<span class="line"><span>│   └── main.ts                      # Entry file</span></span>
<span class="line"><span>├── .editorconfig                    # Editor configuration file</span></span>
<span class="line"><span>├── .env                             # Common environment variables</span></span>
<span class="line"><span>├── .env.dev                         # Development environment variables</span></span>
<span class="line"><span>├── .env.prod                        # Production environment variables</span></span>
<span class="line"><span>├── .gitattributes                   # Git commit configuration</span></span>
<span class="line"><span>├── .gitignore                       # Git ignore file configuration</span></span>
<span class="line"><span>├── .npmrc                           # npm configuration file</span></span>
<span class="line"><span>├── eslint.config.js                 # eslint configuration file</span></span>
<span class="line"><span>├── index.html                       # Entry HTML file</span></span>
<span class="line"><span>├── LICENSE                          # Open source license</span></span>
<span class="line"><span>├── package.json                     # Project dependency configuration file</span></span>
<span class="line"><span>├── README.md                        # Project documentation</span></span>
<span class="line"><span>├── service.config.ts                # Backend service address configuration file</span></span>
<span class="line"><span>├── tsconfig.json                    # TypeScript configuration file</span></span>
<span class="line"><span>├── unocss.config.ts                 # Unocss configuration file</span></span>
<span class="line"><span>└── vite.config.ts                   # Vite configuration file</span></span></code></pre></div>`,2),i=[t];function l(o,c,r,u,d,m){return a(),n("div",null,i)}const y=s(p,[["render",l]]);export{f as __pageData,y as default};
