import{_ as e,c as s,o as t,a3 as a}from"./chunks/framework.CokgVZ6D.js";const S=JSON.parse('{"title":"UnoCSS","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/unocss.md","filePath":"zh/guide/unocss.md","lastUpdated":1719483438000}'),n={name:"zh/guide/unocss.md"},o=a('<h1 id="unocss" tabindex="-1">UnoCSS <a class="header-anchor" href="#unocss" aria-label="Permalink to &quot;UnoCSS&quot;">​</a></h1><ul><li><a href="https://unocss.dev/" target="_blank" rel="noreferrer">UnoCSS</a>：即时按需原子CSS引擎</li><li><a href="https://unocss.dev/interactive/" target="_blank" rel="noreferrer">Interactive Docs</a>：Unocss交互式类名查询文档</li><li><a href="https://www.tailwindcss.cn/docs/installation" target="_blank" rel="noreferrer">tailwindcss</a>：tailwindcss文档</li></ul><p>二者非常在使用上非常相近，但 UnoCSS 更轻量，并且对拓展和订制更加友好。unocss文档内容基本是关于配置方面，而tailwindcss文档内容基本是关于使用方面。具体应该使用什么类名在tailwindcss文档中查询体验更好。</p><p>直接使用unocss的交互查询文档体验会很不好，因为命名规则在没有大致掌握的情况下怎么查？查什么？一些缩写在直接查询属性时也不会体现。交互式文档更适合在掌握类名规则后使用。</p>',4),r=[o];function c(i,l,_,d,u,h){return t(),s("div",null,r)}const f=e(n,[["render",c]]);export{S as __pageData,f as default};
